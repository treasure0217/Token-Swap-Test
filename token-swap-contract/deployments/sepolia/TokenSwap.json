{
  "address": "0xcBc8e59F7B989db68F7BEAA9F7c4C0456D38e0bf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderId",
          "type": "bytes32"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        }
      ],
      "name": "fillOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb73bfbc1c7911549b7be1c72e47882ac347084edba51580c9e133b78dcd2d469",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0xcBc8e59F7B989db68F7BEAA9F7c4C0456D38e0bf",
    "transactionIndex": 52,
    "gasUsed": "701302",
    "logsBloom": "0x
    "blockHash": "0xac3404389e0d6211a451ed11d362d2c8379158ee056123e7bf302bc40ffd44ef",
    "transactionHash": "0xb73bfbc1c7911549b7be1c72e47882ac347084edba51580c9e133b78dcd2d469",
    "logs": [],
    "blockNumber": 5909080,
    "cumulativeGasUsed": "12500120",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7260c14c35ba9b4c02685d0545090d89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderId\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenSwap.sol\":\"TokenSwap\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/TokenSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract TokenSwap {\\n  using SafeERC20 for IERC20;\\n  using Address for address payable;\\n\\n  struct Order {\\n    address seller;\\n    address tokenA;\\n    uint256 amountA;\\n    address tokenB;\\n    uint256 amountB;\\n  }\\n\\n  mapping(bytes32 => Order) public orders;\\n\\n  event OrderCreated(\\n    bytes32 indexed id,\\n    address indexed seller,\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountA,\\n    uint256 amountB\\n  );\\n  event OrderCancelled(bytes32 indexed orderId);\\n  event OrderFilled(\\n    bytes32 indexed id,\\n    address indexed buyer,\\n    uint256 buyAmount,\\n    uint256 sellAmount\\n  );\\n\\n  constructor() {}\\n\\n  function createOrder(\\n    address _tokenA,\\n    uint256 _amountA,\\n    address _tokenB,\\n    uint256 _amountB\\n  ) external payable {\\n    require(_amountA > 0 && _amountB > 0, \\\"Amount must be greater than zero\\\");\\n\\n    bytes32 id = keccak256(abi.encodePacked(_tokenA, _tokenB, _amountA, _amountB, block.timestamp));\\n    orders[id] = Order({\\n      seller: msg.sender,\\n      tokenA: _tokenA,\\n      amountA: _amountA,\\n      tokenB: _tokenB,\\n      amountB: _amountB\\n    });\\n\\n    if (_tokenA == address(0)) {\\n      require(msg.value == _amountA, \\\"Invalid amount\\\");\\n    } else {\\n      IERC20(_tokenA).safeTransferFrom(msg.sender, address(this), _amountA);\\n    }\\n\\n    emit OrderCreated(id, msg.sender, _tokenA, _tokenB, _amountA, _amountB);\\n  }\\n\\n  function cancelOrder(bytes32 id) external {\\n    Order memory order = orders[id];\\n    require(order.seller == msg.sender, \\\"Only seller can cancel the order\\\");\\n    require(order.amountA > 0, \\\"Order already filled\\\");\\n\\n    uint256 amount = order.amountA;\\n    order.amountA = 0;\\n    order.amountB = 0;\\n    orders[id] = order;\\n\\n    if (order.tokenA == address(0)) {\\n      payable(order.seller).sendValue(amount);\\n    } else {\\n      IERC20(order.tokenA).safeTransfer(order.seller, amount);\\n    }\\n\\n    emit OrderCancelled(id);\\n  }\\n\\n  function fillOrder(bytes32 id, uint256 _amountB) external payable {\\n    Order memory order = orders[id];\\n    require(order.amountA > 0, \\\"Order already filled\\\");\\n    require(_amountB > 0 && _amountB <= order.amountB, \\\"Invalid amount\\\");\\n\\n    uint256 amountA = (order.amountA * _amountB) / order.amountB;\\n    order.amountA -= amountA;\\n    order.amountB -= _amountB;\\n    orders[id] = order;\\n\\n    if (order.tokenB == address(0)) {\\n      require(msg.value == _amountB, \\\"Invalid amount\\\");\\n      payable(order.seller).sendValue(_amountB);\\n    } else {\\n      IERC20(order.tokenB).safeTransferFrom(msg.sender, order.seller, _amountB);\\n    }\\n\\n    if (order.tokenA == address(0)) {\\n      payable(msg.sender).sendValue(amountA);\\n    } else {\\n      IERC20(order.tokenA).safeTransfer(msg.sender, amountA);\\n    }\\n\\n    emit OrderFilled(id, msg.sender, _amountB, amountA);\\n  }\\n}\\n\",\"keccak256\":\"0xc00067d5366086db07ee993d2d96e83204a2aa3018933a8299ebc5a69768d740\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610bb7806100206000396000f3fe60806040526004361061003f5760003560e01c80631cea1be8146100445780637489ec23146100595780639c3f1e9014610079578063fc05ca311461010d575b600080fd5b610057610052366004610a0b565b610120565b005b34801561006557600080fd5b50610057610074366004610a2d565b610384565b34801561008557600080fd5b506100d2610094366004610a2d565b600060208190529081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949284169391929091169085565b604080516001600160a01b03968716815294861660208601528401929092529092166060820152608081019190915260a00160405180910390f35b61005761011b366004610a62565b610556565b60008281526020818152604091829020825160a08101845281546001600160a01b0390811682526001830154811693820193909352600282015493810184905260038201549092166060830152600401546080820152906101bf5760405162461bcd60e51b815260206004820152601460248201527313dc99195c88185b1c9958591e48199a5b1b195960621b60448201526064015b60405180910390fd5b6000821180156101d3575080608001518211155b6101ef5760405162461bcd60e51b81526004016101b690610aa6565b600081608001518383604001516102069190610ae4565b6102109190610afb565b905080826040018181516102249190610b1d565b90525060808201805184919061023b908390610b1d565b90525060008481526020818152604091829020845181546001600160a01b03199081166001600160a01b039283161783559286015160018301805485169183169190911790559285015160028201556060850151600382018054909316931692831790915560808401516004909101556102e8578234146102ce5760405162461bcd60e51b81526004016101b690610aa6565b81516102e3906001600160a01b031684610733565b610307565b81516060830151610307916001600160a01b03909116903390866107cf565b60208201516001600160a01b0316610328576103233382610733565b610341565b6020820151610341906001600160a01b0316338361083c565b6040805184815260208101839052339186917f5bb6fb2ac27d4e7eddcefd58c08dfc9cf1df81d44dd8c4f8f8850c6f35e51dcc910160405180910390a350505050565b60008181526020818152604091829020825160a08101845281546001600160a01b03908116808352600184015482169483019490945260028301549482019490945260038201549093166060840152600401546080830152331461042a5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792073656c6c65722063616e2063616e63656c20746865206f7264657260448201526064016101b6565b60008160400151116104755760405162461bcd60e51b815260206004820152601460248201527313dc99195c88185b1c9958591e48199a5b1b195960621b60448201526064016101b6565b60408181018051600080835260808501818152868252602082815294909120855181546001600160a01b03199081166001600160a01b03928316178355958701516001830180548816918316918217905594516002830155606087015160038301805490971691161790945551600490930192909255610509578151610504906001600160a01b031682610733565b610526565b81516020830151610526916001600160a01b03909116908361083c565b60405183907f5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d90600090a2505050565b6000831180156105665750600081115b6105b25760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064016101b6565b6040516bffffffffffffffffffffffff19606086811b8216602084015284901b166034820152604881018490526068810182905242608882015260009060a80160408051601f19818403018152828252805160209182012060a0840183523384526001600160a01b038981168584018181528686018b81528a841660608901908152608089018b815260008781529788905297909620975188549085166001600160a01b031991821617895591516001890180549186169184169190911790555160028801559351600387018054919093169416939093179055915160049093019290925591506106c1578334146106bc5760405162461bcd60e51b81526004016101b690610aa6565b6106d6565b6106d66001600160a01b0386163330876107cf565b604080516001600160a01b0387811682528516602082015290810185905260608101839052339082907f961e6438a987eab19d9850691e56ca64f442dbb689801b0f3cfc1381c98ed15e9060800160405180910390a35050505050565b804710156107565760405163cd78605960e01b81523060048201526024016101b6565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146107a3576040519150601f19603f3d011682016040523d82523d6000602084013e6107a8565b606091505b50509050806107ca57604051630a12f52160e11b815260040160405180910390fd5b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526108369186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061086d565b50505050565b6040516001600160a01b038381166024830152604482018390526107ca91859182169063a9059cbb90606401610804565b60006108826001600160a01b038416836108d0565b905080516000141580156108a75750808060200190518101906108a59190610b30565b155b156107ca57604051635274afe760e01b81526001600160a01b03841660048201526024016101b6565b60606108de838360006108e7565b90505b92915050565b60608147101561090c5760405163cd78605960e01b81523060048201526024016101b6565b600080856001600160a01b031684866040516109289190610b52565b60006040518083038185875af1925050503d8060008114610965576040519150601f19603f3d011682016040523d82523d6000602084013e61096a565b606091505b509150915061097a868383610986565b925050505b9392505050565b60608261099b57610996826109e2565b61097f565b81511580156109b257506001600160a01b0384163b155b156109db57604051639996b31560e01b81526001600160a01b03851660048201526024016101b6565b508061097f565b8051156109f25780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008060408385031215610a1e57600080fd5b50508035926020909101359150565b600060208284031215610a3f57600080fd5b5035919050565b80356001600160a01b0381168114610a5d57600080fd5b919050565b60008060008060808587031215610a7857600080fd5b610a8185610a46565b935060208501359250610a9660408601610a46565b9396929550929360600135925050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108e1576108e1610ace565b600082610b1857634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156108e1576108e1610ace565b600060208284031215610b4257600080fd5b8151801515811461097f57600080fd5b6000825160005b81811015610b735760208186018101518583015201610b59565b50600092019182525091905056fea2646970667358221220afd28d3f2c99d13f258d1efc86e5bc970b462e7eea0ce13844987f56189b3e3064736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80631cea1be8146100445780637489ec23146100595780639c3f1e9014610079578063fc05ca311461010d575b600080fd5b610057610052366004610a0b565b610120565b005b34801561006557600080fd5b50610057610074366004610a2d565b610384565b34801561008557600080fd5b506100d2610094366004610a2d565b600060208190529081526040902080546001820154600283015460038401546004909401546001600160a01b03938416949284169391929091169085565b604080516001600160a01b03968716815294861660208601528401929092529092166060820152608081019190915260a00160405180910390f35b61005761011b366004610a62565b610556565b60008281526020818152604091829020825160a08101845281546001600160a01b0390811682526001830154811693820193909352600282015493810184905260038201549092166060830152600401546080820152906101bf5760405162461bcd60e51b815260206004820152601460248201527313dc99195c88185b1c9958591e48199a5b1b195960621b60448201526064015b60405180910390fd5b6000821180156101d3575080608001518211155b6101ef5760405162461bcd60e51b81526004016101b690610aa6565b600081608001518383604001516102069190610ae4565b6102109190610afb565b905080826040018181516102249190610b1d565b90525060808201805184919061023b908390610b1d565b90525060008481526020818152604091829020845181546001600160a01b03199081166001600160a01b039283161783559286015160018301805485169183169190911790559285015160028201556060850151600382018054909316931692831790915560808401516004909101556102e8578234146102ce5760405162461bcd60e51b81526004016101b690610aa6565b81516102e3906001600160a01b031684610733565b610307565b81516060830151610307916001600160a01b03909116903390866107cf565b60208201516001600160a01b0316610328576103233382610733565b610341565b6020820151610341906001600160a01b0316338361083c565b6040805184815260208101839052339186917f5bb6fb2ac27d4e7eddcefd58c08dfc9cf1df81d44dd8c4f8f8850c6f35e51dcc910160405180910390a350505050565b60008181526020818152604091829020825160a08101845281546001600160a01b03908116808352600184015482169483019490945260028301549482019490945260038201549093166060840152600401546080830152331461042a5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c792073656c6c65722063616e2063616e63656c20746865206f7264657260448201526064016101b6565b60008160400151116104755760405162461bcd60e51b815260206004820152601460248201527313dc99195c88185b1c9958591e48199a5b1b195960621b60448201526064016101b6565b60408181018051600080835260808501818152868252602082815294909120855181546001600160a01b03199081166001600160a01b03928316178355958701516001830180548816918316918217905594516002830155606087015160038301805490971691161790945551600490930192909255610509578151610504906001600160a01b031682610733565b610526565b81516020830151610526916001600160a01b03909116908361083c565b60405183907f5152abf959f6564662358c2e52b702259b78bac5ee7842a0f01937e670efcc7d90600090a2505050565b6000831180156105665750600081115b6105b25760405162461bcd60e51b815260206004820181905260248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f60448201526064016101b6565b6040516bffffffffffffffffffffffff19606086811b8216602084015284901b166034820152604881018490526068810182905242608882015260009060a80160408051601f19818403018152828252805160209182012060a0840183523384526001600160a01b038981168584018181528686018b81528a841660608901908152608089018b815260008781529788905297909620975188549085166001600160a01b031991821617895591516001890180549186169184169190911790555160028801559351600387018054919093169416939093179055915160049093019290925591506106c1578334146106bc5760405162461bcd60e51b81526004016101b690610aa6565b6106d6565b6106d66001600160a01b0386163330876107cf565b604080516001600160a01b0387811682528516602082015290810185905260608101839052339082907f961e6438a987eab19d9850691e56ca64f442dbb689801b0f3cfc1381c98ed15e9060800160405180910390a35050505050565b804710156107565760405163cd78605960e01b81523060048201526024016101b6565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146107a3576040519150601f19603f3d011682016040523d82523d6000602084013e6107a8565b606091505b50509050806107ca57604051630a12f52160e11b815260040160405180910390fd5b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526108369186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061086d565b50505050565b6040516001600160a01b038381166024830152604482018390526107ca91859182169063a9059cbb90606401610804565b60006108826001600160a01b038416836108d0565b905080516000141580156108a75750808060200190518101906108a59190610b30565b155b156107ca57604051635274afe760e01b81526001600160a01b03841660048201526024016101b6565b60606108de838360006108e7565b90505b92915050565b60608147101561090c5760405163cd78605960e01b81523060048201526024016101b6565b600080856001600160a01b031684866040516109289190610b52565b60006040518083038185875af1925050503d8060008114610965576040519150601f19603f3d011682016040523d82523d6000602084013e61096a565b606091505b509150915061097a868383610986565b925050505b9392505050565b60608261099b57610996826109e2565b61097f565b81511580156109b257506001600160a01b0384163b155b156109db57604051639996b31560e01b81526001600160a01b03851660048201526024016101b6565b508061097f565b8051156109f25780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008060408385031215610a1e57600080fd5b50508035926020909101359150565b600060208284031215610a3f57600080fd5b5035919050565b80356001600160a01b0381168114610a5d57600080fd5b919050565b60008060008060808587031215610a7857600080fd5b610a8185610a46565b935060208501359250610a9660408601610a46565b9396929550929360600135925050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176108e1576108e1610ace565b600082610b1857634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156108e1576108e1610ace565b600060208284031215610b4257600080fd5b8151801515811461097f57600080fd5b6000825160005b81811015610b735760208186018101518583015201610b59565b50600092019182525091905056fea2646970667358221220afd28d3f2c99d13f258d1efc86e5bc970b462e7eea0ce13844987f56189b3e3064736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1394,
        "contract": "contracts/TokenSwap.sol:TokenSwap",
        "label": "orders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Order)1389_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Order)1389_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TokenSwap.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)1389_storage"
      },
      "t_struct(Order)1389_storage": {
        "encoding": "inplace",
        "label": "struct TokenSwap.Order",
        "members": [
          {
            "astId": 1380,
            "contract": "contracts/TokenSwap.sol:TokenSwap",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1382,
            "contract": "contracts/TokenSwap.sol:TokenSwap",
            "label": "tokenA",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1384,
            "contract": "contracts/TokenSwap.sol:TokenSwap",
            "label": "amountA",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1386,
            "contract": "contracts/TokenSwap.sol:TokenSwap",
            "label": "tokenB",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1388,
            "contract": "contracts/TokenSwap.sol:TokenSwap",
            "label": "amountB",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}